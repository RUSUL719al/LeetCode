package HOOT100;
/**
 * 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
示例 1：
输入：n = 2
输出：2
解释：有两种方法可以爬到楼顶。
1. 1 阶 + 1 阶
2. 2 阶

示例 2：
输入：n = 3
输出：3
解释：有三种方法可以爬到楼顶。
1. 1 阶 + 1 阶 + 1 阶
2. 1 阶 + 2 阶
3. 2 阶 + 1 阶
 
提示：
1 <= n <= 45

来源：力扣（LeetCode）

    解题思路：只考虑最后一步，假设有4个台阶，最后一步有两种走法（剩下一个台阶的组合和剩下两个台阶组合）。两种走法的所有可能性都想家就是所有的可能性。
    举例：
            1+1+1+1      剩下一个台阶
            1+2+1        剩下一个台阶
            2+1+1        剩下一个台阶
            1+1+2        剩下两个台阶
            2+2          剩下两个台阶
    根据列出的规律可以发现剩下一个台阶的走法是（4-1）个台阶走法的总和；剩下两个台阶的走法（4-2）个台阶的走法的总和。因此可以得出结论假设有n个台阶那总的走法总数等于（n-1）个台阶走法数和（n-2）个台阶走法数的相加
    按照此思路得：dp[n]=dp[n−1]+dp[n−2] 
 */
public class climbStairs {

    public static void main(String[] args) {
        int result = climbstrairs(4);
        System.out.println("The Result Is:" + result);
    }
    public static int climbstrairs(int n) {
        //先声明数组，下标表示台阶数，下标的值表示对应台阶的走法总数
        int[] dp = new int[n+1];
        //第0个台阶和第一个台阶的走法初始为1
        dp[0] = 1;dp[1] = 1;
        for(int i=2;i<=n;i++){
            dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n];
    }
}
